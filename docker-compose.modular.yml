version: "3.8"

services:
  # ========================================
  # SERVICIOS CORE (API Principal)
  # ========================================
  api-core:
    build:
      context: ./api
      dockerfile: Dockerfile
    container_name: telemetry-api-core
    environment:
      - DJANGO_SETTINGS_MODULE=api.config.settings.production
      - SERVICE_TYPE=core
      - DATABASE_URL=postgresql://telemetry:password@postgres:5432/telemetry
      - REDIS_URL=redis://redis:6379/0
      - DEBUG=false
    volumes:
      - ./api:/app
      - ./logs:/var/log/telemetry
    ports:
      - "8000:8000"
    depends_on:
      - postgres
      - redis
    networks:
      - telemetry-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ========================================
  # SERVICIO DE TELEMETR√çA
  # ========================================
  api-telemetry:
    build:
      context: ./api
      dockerfile: Dockerfile
    container_name: telemetry-api-telemetry
    environment:
      - DJANGO_SETTINGS_MODULE=api.config.settings.production
      - SERVICE_TYPE=telemetry
      - DATABASE_URL=postgresql://telemetry:password@postgres:5432/telemetry
      - REDIS_URL=redis://redis:6379/0
      - TELEMETRY_ENABLED=true
      - PROCESSING_ENABLED=true
      - DEBUG=false
    volumes:
      - ./api:/app
      - ./logs:/var/log/telemetry
    ports:
      - "8001:8000"
    depends_on:
      - postgres
      - redis
    networks:
      - telemetry-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ========================================
  # SERVICIO DE CUMPLIMIENTO
  # ========================================
  api-compliance:
    build:
      context: ./api
      dockerfile: Dockerfile
    container_name: telemetry-api-compliance
    environment:
      - DJANGO_SETTINGS_MODULE=api.config.settings.production
      - SERVICE_TYPE=compliance
      - DATABASE_URL=postgresql://telemetry:password@postgres:5432/telemetry
      - REDIS_URL=redis://redis:6379/0
      - COMPLIANCE_ENABLED=true
      - DGA_ENABLED=true
      - DEBUG=false
    volumes:
      - ./api:/app
      - ./logs:/var/log/telemetry
    ports:
      - "8002:8000"
    depends_on:
      - postgres
      - redis
    networks:
      - telemetry-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ========================================
  # BASE DE DATOS
  # ========================================
  postgres:
    image: postgres:13-alpine
    container_name: telemetry-postgres
    environment:
      - POSTGRES_DB=telemetry
      - POSTGRES_USER=telemetry
      - POSTGRES_PASSWORD=password
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - telemetry-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U telemetry -d telemetry"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ========================================
  # CACHE REDIS
  # ========================================
  redis:
    image: redis:6-alpine
    container_name: telemetry-redis
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - telemetry-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ========================================
  # LOAD BALANCER (NGINX)
  # ========================================
  nginx:
    image: nginx:alpine
    container_name: telemetry-nginx
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./logs/nginx:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - api-core
      - api-telemetry
      - api-compliance
    networks:
      - telemetry-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ========================================
  # MONITORING (PROMETHEUS)
  # ========================================
  prometheus:
    image: prom/prometheus:latest
    container_name: telemetry-prometheus
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - telemetry-network
    restart: unless-stopped
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--storage.tsdb.retention.time=200h"
      - "--web.enable-lifecycle"

  # ========================================
  # MONITORING (GRAFANA)
  # ========================================
  grafana:
    image: grafana/grafana:latest
    container_name: telemetry-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    ports:
      - "3000:3000"
    networks:
      - telemetry-network
    restart: unless-stopped
    depends_on:
      - prometheus

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  telemetry-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
