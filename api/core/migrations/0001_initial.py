# Generated by Django 5.1.6 on 2025-02-05 23:08

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Client',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='Fecha de creacion.', verbose_name='created at')),
                ('modified', models.DateTimeField(auto_now_add=True, help_text='Fecha de modificacion.', verbose_name='modified at')),
                ('name', models.CharField(max_length=300, verbose_name='Nombre')),
                ('rut', models.CharField(max_length=300, verbose_name='Rut')),
                ('address', models.CharField(max_length=300, verbose_name='Direccion')),
                ('phone', models.CharField(max_length=300, verbose_name='Telefono')),
                ('email', models.CharField(max_length=300, verbose_name='Correo')),
            ],
            options={
                'verbose_name': 'Cliente',
                'verbose_name_plural': 'Clientes',
            },
        ),
        migrations.CreateModel(
            name='TypeFileCatchment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='Fecha de creacion.', verbose_name='created at')),
                ('modified', models.DateTimeField(auto_now_add=True, help_text='Fecha de modificacion.', verbose_name='modified at')),
                ('name', models.CharField(max_length=300, verbose_name='Nombre')),
                ('internal', models.BooleanField(default=False, verbose_name='Interno')),
            ],
            options={
                'verbose_name': 'Tipo de archivo',
                'verbose_name_plural': 'Tipos de archivos',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='Fecha de creacion.', verbose_name='created at')),
                ('modified', models.DateTimeField(auto_now_add=True, help_text='Fecha de modificacion.', verbose_name='modified at')),
                ('email', models.EmailField(error_messages={'unique': 'El usuario ya existe.'}, max_length=254, unique=True, verbose_name='email address')),
                ('txt_password', models.CharField(blank=True, default='pozos.2023', max_length=1200, null=True)),
                ('is_verified', models.BooleanField(default=True, help_text='Se establece en verdadero cuando el usuario ha verificado su dirección de correo electrónico')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Usuario',
                'verbose_name_plural': 'Usuarios',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='CatchmentPoint',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='Fecha de creacion.', verbose_name='created at')),
                ('modified', models.DateTimeField(auto_now_add=True, help_text='Fecha de modificacion.', verbose_name='modified at')),
                ('title', models.CharField(blank=True, max_length=200, null=True, verbose_name='Nombre')),
                ('is_thethings', models.BooleanField(default=False, verbose_name='Nettra')),
                ('is_tdata', models.BooleanField(default=False, verbose_name='Twin')),
                ('is_novus', models.BooleanField(default=False, verbose_name='Novus')),
                ('owner_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='owned_catchment_points', to=settings.AUTH_USER_MODEL, verbose_name='Propietario')),
                ('users_viewers', models.ManyToManyField(blank=True, related_name='viewed_catchment_points', to=settings.AUTH_USER_MODEL, verbose_name='usuario')),
            ],
            options={
                'verbose_name': 'Punto de captacion',
                'verbose_name_plural': 'Puntos de captacion',
            },
        ),
        migrations.CreateModel(
            name='DgaDataConfigCatchment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='Fecha de creacion.', verbose_name='created at')),
                ('modified', models.DateTimeField(auto_now_add=True, help_text='Fecha de modificacion.', verbose_name='modified at')),
                ('send_dga', models.BooleanField(blank=True, null=True, verbose_name='Activar cumplimiento')),
                ('standard', models.CharField(blank=True, choices=[('MAYOR', 'mayor'), ('MEDIO', 'medio'), ('MENOR', 'menor'), ('CAUDALES_MUY_PEQUENOS', 'cmp')], max_length=300, null=True, verbose_name='Estandar')),
                ('type_dga', models.CharField(blank=True, choices=[('SUBTERRANEO', 'subterraneo'), ('SUPERFICIAL', 'superficial')], default='SUBTERRANEO', max_length=300, null=True, verbose_name='Tipo')),
                ('code_dga', models.CharField(blank=True, max_length=1200, null=True, verbose_name='Codigo de obra(dga)')),
                ('flow_granted_dga', models.FloatField(blank=True, max_length=1200, null=True, verbose_name='Caudal otorgado')),
                ('total_granted_dga', models.IntegerField(blank=True, null=True, verbose_name='Total otorgado')),
                ('shac', models.CharField(blank=True, max_length=1200, null=True, verbose_name='Sector hidrologico(SHAC)')),
                ('date_start_compliance', models.DateField(blank=True, null=True, verbose_name='Fecha inicio envío DGA')),
                ('date_created_code', models.DateField(blank=True, null=True, verbose_name='Fecha codigo creacion DGA')),
                ('name_informant', models.CharField(default='Diego Mardones', max_length=1200)),
                ('rut_report_dga', models.CharField(default='17352192-8', max_length=1400, verbose_name='RUT')),
                ('password_dga_software', models.CharField(default='ZSQgCiDg7y', max_length=1400, verbose_name='clave DGA')),
                ('point_catchment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dga_data_config_profiles', to='core.catchmentpoint', verbose_name='Punto de captacion')),
            ],
            options={
                'verbose_name': 'Configuracion de datos DGA',
                'verbose_name_plural': 'Configuraciones de datos DGA',
            },
        ),
        migrations.CreateModel(
            name='NotificationsCatchment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='Fecha de creacion.', verbose_name='created at')),
                ('modified', models.DateTimeField(auto_now_add=True, help_text='Fecha de modificacion.', verbose_name='modified at')),
                ('title', models.CharField(max_length=300, verbose_name='Titulo')),
                ('message', models.CharField(max_length=300, verbose_name='Mensaje')),
                ('type_notification', models.CharField(choices=[('INFO', 'Informativo'), ('WARNING', 'Advertencia'), ('ALERT', 'Alerta'), ('CRITICAL', 'Crítico'), ('SUPPORT', 'Soporte')], max_length=50, verbose_name='Tipo de notificación')),
                ('point_catchment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to='core.catchmentpoint', verbose_name='Punto de captacion')),
            ],
            options={
                'verbose_name': 'Notificación',
                'verbose_name_plural': 'Notificaciones',
            },
        ),
        migrations.CreateModel(
            name='InteractionDetail',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='Fecha de creacion.', verbose_name='created at')),
                ('modified', models.DateTimeField(auto_now_add=True, help_text='Fecha de modificacion.', verbose_name='modified at')),
                ('date_time_medition', models.DateTimeField(blank=True, max_length=800, null=True, verbose_name='Fecha/hora medición')),
                ('date_time_last_logger', models.DateTimeField(blank=True, max_length=800, null=True, verbose_name='Fecha/hora logger')),
                ('flow', models.CharField(blank=True, max_length=400, null=True, verbose_name='Caudal(lt)')),
                ('total', models.CharField(blank=True, max_length=400, null=True, verbose_name='Total(m3)')),
                ('total_diff', models.IntegerField(default=0, verbose_name='Consumo(m3/h)')),
                ('total_today_diff', models.IntegerField(default=0, verbose_name='Consumo hoy(m3)')),
                ('nivel', models.CharField(blank=True, max_length=400, null=True, verbose_name='Nivel(mt)')),
                ('water_table', models.CharField(blank=True, max_length=400, null=True, verbose_name='Nivel freático(mt)')),
                ('send_dga', models.BooleanField(default=False, verbose_name='DGA')),
                ('return_dga', models.TextField(blank=True, max_length=3000, null=True)),
                ('n_voucher', models.TextField(blank=True, max_length=3000, null=True)),
                ('is_warning', models.BooleanField(default=False, verbose_name='Alerta')),
                ('is_error', models.BooleanField(default=False, verbose_name='Error')),
                ('catchment_point', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.catchmentpoint', verbose_name='Punto de captacion')),
                ('notification', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.notificationscatchment', verbose_name='Notificación')),
            ],
            options={
                'verbose_name': 'Registro telemetria',
                'verbose_name_plural': 'Registros Telemetria',
            },
        ),
        migrations.CreateModel(
            name='ProfileDataConfigCatchment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='Fecha de creacion.', verbose_name='created at')),
                ('modified', models.DateTimeField(auto_now_add=True, help_text='Fecha de modificacion.', verbose_name='modified at')),
                ('token_service', models.CharField(blank=True, max_length=400, null=True)),
                ('d1', models.FloatField(blank=True, max_length=100, null=True, verbose_name='Profundidad(mt)')),
                ('d2', models.FloatField(blank=True, max_length=100, null=True, verbose_name='Posicionamiento de bomba(mt)')),
                ('d3', models.FloatField(blank=True, max_length=100, null=True, verbose_name='Posicionamiento nivel(mt)')),
                ('d4', models.FloatField(blank=True, max_length=100, null=True, verbose_name='Diametro ducto salida bomba(pulg)')),
                ('d5', models.FloatField(blank=True, max_length=100, null=True, verbose_name='Diametro flujometro(pulg)')),
                ('d6', models.FloatField(blank=True, max_length=100, null=True)),
                ('is_telemetry', models.BooleanField(default=False, verbose_name='Activar telemetría')),
                ('date_start_telemetry', models.DateField(blank=True, null=True, verbose_name='Fecha inicio telemetria')),
                ('date_delivery_act', models.DateField(blank=True, null=True, verbose_name='Fecha acta de entrega')),
                ('point_catchment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='data_config_profiles', to='core.catchmentpoint', verbose_name='Punto de captacion')),
            ],
            options={
                'verbose_name': 'Configuracion de datos',
                'verbose_name_plural': 'Configuracion de datos',
            },
        ),
        migrations.CreateModel(
            name='ProfileIkoluCatchment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='Fecha de creacion.', verbose_name='created at')),
                ('modified', models.DateTimeField(auto_now_add=True, help_text='Fecha de modificacion.', verbose_name='modified at')),
                ('entry_by_form', models.BooleanField(default=False, verbose_name='Ingreso por formulario')),
                ('m1', models.BooleanField(default=True, verbose_name='MODULO: Mi Pozo')),
                ('m2', models.BooleanField(default=False, verbose_name='MODULO: DGA')),
                ('m3', models.BooleanField(default=False, verbose_name='MODULO: Datos y reportes')),
                ('m3_start_subscription', models.DateField(blank=True, null=True, verbose_name='Fecha inicio suscripción MODULO: Datos y reportes')),
                ('m3_type_subscriptions', models.CharField(blank=True, choices=[('MENSUAL', 'mensual'), ('TRIMESTRAL', 'trimestral'), ('SEMESTRAL', 'semestral'), ('ANUAL', 'anual')], max_length=300, null=True, verbose_name='Tipo de suscripción MODULO: Datos y reportes')),
                ('m4', models.BooleanField(default=False, verbose_name='MODULO: Graficos')),
                ('m4_start_subscription', models.DateField(blank=True, null=True, verbose_name='Fecha inicio suscripción MODULO: Graficos')),
                ('m4_type_subscriptions', models.CharField(blank=True, choices=[('MENSUAL', 'mensual'), ('TRIMESTRAL', 'trimestral'), ('SEMESTRAL', 'semestral'), ('ANUAL', 'anual')], max_length=300, null=True, verbose_name='Tipo de suscripción MODULO: Graficos')),
                ('m5', models.BooleanField(default=False, verbose_name='MODULO: Indicadores')),
                ('m5_start_subscription', models.DateField(blank=True, null=True, verbose_name='Fecha inicio suscripción MODULO: Indicadores')),
                ('m5_type_subscriptions', models.CharField(blank=True, choices=[('MENSUAL', 'mensual'), ('TRIMESTRAL', 'trimestral'), ('SEMESTRAL', 'semestral'), ('ANUAL', 'anual')], max_length=300, null=True, verbose_name='Tipo de suscripción MODULO: Indicadores')),
                ('m6', models.BooleanField(default=False, verbose_name='MODULO: Alarmas')),
                ('m6_start_subscription', models.DateField(blank=True, null=True, verbose_name='Fecha inicio suscripción MODULO: Alarmas')),
                ('m6_type_subscriptions', models.CharField(blank=True, choices=[('MENSUAL', 'mensual'), ('TRIMESTRAL', 'trimestral'), ('SEMESTRAL', 'semestral'), ('ANUAL', 'anual')], max_length=300, null=True, verbose_name='Tipo de suscripción MODULO: Alarmas')),
                ('m7', models.BooleanField(default=False, verbose_name='MODULO: Documentos')),
                ('m7_start_subscription', models.DateField(blank=True, null=True, verbose_name='Fecha inicio suscripción MODULO: Documentos')),
                ('m7_type_subscriptions', models.CharField(blank=True, choices=[('MENSUAL', 'mensual'), ('TRIMESTRAL', 'trimestral'), ('SEMESTRAL', 'semestral'), ('ANUAL', 'anual')], max_length=300, null=True, verbose_name='Tipo de suscripción MODULO: Documentos')),
                ('point_catchment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ikolu_profiles', to='core.catchmentpoint', verbose_name='Punto de captacion')),
            ],
            options={
                'verbose_name': 'Perfil Ikolu',
                'verbose_name_plural': 'Perfiles Ikolu',
            },
        ),
        migrations.CreateModel(
            name='ProjectCatchments',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='Fecha de creacion.', verbose_name='created at')),
                ('modified', models.DateTimeField(auto_now_add=True, help_text='Fecha de modificacion.', verbose_name='modified at')),
                ('name', models.CharField(max_length=300, verbose_name='Nombre')),
                ('code_internal', models.CharField(blank=True, max_length=300, null=True, verbose_name='Codigo interno')),
                ('client', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.client', verbose_name='Cliente')),
            ],
            options={
                'verbose_name': 'Proyecto',
                'verbose_name_plural': 'Proyectos',
            },
        ),
        migrations.AddField(
            model_name='catchmentpoint',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='catchment_points', to='core.projectcatchments', verbose_name='Proyecto'),
        ),
        migrations.CreateModel(
            name='RegisterPersons',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='Fecha de creacion.', verbose_name='created at')),
                ('modified', models.DateTimeField(auto_now_add=True, help_text='Fecha de modificacion.', verbose_name='modified at')),
                ('name', models.CharField(blank=True, max_length=300, null=True)),
                ('email', models.CharField(blank=True, max_length=300, null=True)),
                ('phone', models.CharField(blank=True, max_length=300, null=True)),
                ('profile', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.profiledataconfigcatchment')),
            ],
            options={
                'ordering': ['-created', '-modified'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ResponseNotificationsCatchment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='Fecha de creacion.', verbose_name='created at')),
                ('modified', models.DateTimeField(auto_now_add=True, help_text='Fecha de modificacion.', verbose_name='modified at')),
                ('response', models.CharField(max_length=300, verbose_name='Respuesta')),
                ('notification', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='responses', to='core.notificationscatchment', verbose_name='Notificación')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='responses', to=settings.AUTH_USER_MODEL, verbose_name='Usuario')),
            ],
            options={
                'verbose_name': 'Respuesta de notificación',
                'verbose_name_plural': 'Respuestas de notificaciones',
            },
        ),
        migrations.CreateModel(
            name='SchemesCatchment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='Fecha de creacion.', verbose_name='created at')),
                ('modified', models.DateTimeField(auto_now_add=True, help_text='Fecha de modificacion.', verbose_name='modified at')),
                ('name', models.CharField(max_length=300, verbose_name='Nombre')),
                ('description', models.CharField(max_length=300, verbose_name='Descripción')),
                ('points_catchment', models.ManyToManyField(related_name='schemes', to='core.catchmentpoint', verbose_name='Punto de captacion')),
            ],
            options={
                'verbose_name': 'Esquema',
                'verbose_name_plural': 'Esquemas',
            },
        ),
        migrations.CreateModel(
            name='FileCatchment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='Fecha de creacion.', verbose_name='created at')),
                ('modified', models.DateTimeField(auto_now_add=True, help_text='Fecha de modificacion.', verbose_name='modified at')),
                ('name', models.CharField(max_length=300, verbose_name='Nombre')),
                ('file', models.FileField(upload_to='files_catchment', verbose_name='Archivo')),
                ('description', models.CharField(max_length=300, verbose_name='Descripción')),
                ('is_active', models.BooleanField(default=True, verbose_name='Activo')),
                ('point_catchment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='files', to='core.catchmentpoint', verbose_name='Punto de captacion')),
                ('type_file', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='files', to='core.typefilecatchment', verbose_name='Tipo de archivo')),
            ],
            options={
                'verbose_name': 'Archivo',
                'verbose_name_plural': 'Archivos',
            },
        ),
        migrations.CreateModel(
            name='Variable',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='Fecha de creacion.', verbose_name='created at')),
                ('modified', models.DateTimeField(auto_now_add=True, help_text='Fecha de modificacion.', verbose_name='modified at')),
                ('str_variable', models.CharField(max_length=400, verbose_name='Variable (str)')),
                ('label', models.CharField(max_length=400, verbose_name='Etiqueta')),
                ('type_variable', models.CharField(choices=[('NIVEL', 'nivel'), ('CAUDAL', 'caudal'), ('CAUDAL PROMEDIO', 'caudal_promedio((diff/3600)*1000)'), ('TOTALIZADO', 'totalizado')], max_length=1200, verbose_name='Tipo variable')),
                ('token_service', models.CharField(blank=True, max_length=400, null=True, verbose_name='Token')),
                ('service', models.CharField(blank=True, choices=[('NOVUS', 'novus'), ('NETTRA', 'nettra'), ('TWIN', 'twin')], max_length=1200, null=True, verbose_name='Proveedor')),
                ('pulses_factor', models.IntegerField(blank=True, default=1000, null=True, verbose_name='Pulsos(solo aplica a totalizadores (pulsos*pulsos_factor)/1000)')),
                ('addition', models.IntegerField(blank=True, default=0, null=True, verbose_name='Constante(solo aplica a totalizadores)')),
                ('convert_to_lt', models.BooleanField(default=False, verbose_name='Pasar de m3 a lt(solo aplica en caudal) litros/3,6')),
                ('calculate_nivel', models.IntegerField(blank=True, null=True, verbose_name='Base Calculo nivel(n/base calculo)')),
                ('scheme_catchment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='variables', to='core.schemescatchment', verbose_name='Esquema')),
            ],
            options={
                'verbose_name': 'Variable',
                'verbose_name_plural': 'Variables',
            },
        ),
    ]
